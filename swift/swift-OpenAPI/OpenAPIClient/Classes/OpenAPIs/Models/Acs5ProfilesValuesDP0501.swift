//
// Acs5ProfilesValuesDP0501.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Acs5ProfilesValuesDP0501: Codable, Hashable {

    public var mDBGroupName: String
    public var mDBGroupCode: String
    public var dP050001E: Acs5ProfilesValuesDP0501DP050001E
    public var dP050002E: Acs5ProfilesValuesDP0501DP050002E
    public var dP050002PE: Acs5ProfilesValuesDP0501DP050002PE
    public var dP050003E: Acs5ProfilesValuesDP0501DP050003E
    public var dP050003PE: Acs5ProfilesValuesDP0501DP050003PE
    public var dP050004E: Acs5ProfilesValuesDP0501DP050004E

    public init(mDBGroupName: String, mDBGroupCode: String, dP050001E: Acs5ProfilesValuesDP0501DP050001E, dP050002E: Acs5ProfilesValuesDP0501DP050002E, dP050002PE: Acs5ProfilesValuesDP0501DP050002PE, dP050003E: Acs5ProfilesValuesDP0501DP050003E, dP050003PE: Acs5ProfilesValuesDP0501DP050003PE, dP050004E: Acs5ProfilesValuesDP0501DP050004E) {
        self.mDBGroupName = mDBGroupName
        self.mDBGroupCode = mDBGroupCode
        self.dP050001E = dP050001E
        self.dP050002E = dP050002E
        self.dP050002PE = dP050002PE
        self.dP050003E = dP050003E
        self.dP050003PE = dP050003PE
        self.dP050004E = dP050004E
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mDBGroupName = "MDBGroupName"
        case mDBGroupCode = "MDBGroupCode"
        case dP050001E = "DP050001E"
        case dP050002E = "DP050002E"
        case dP050002PE = "DP050002PE"
        case dP050003E = "DP050003E"
        case dP050003PE = "DP050003PE"
        case dP050004E = "DP050004E"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mDBGroupName, forKey: .mDBGroupName)
        try container.encode(mDBGroupCode, forKey: .mDBGroupCode)
        try container.encode(dP050001E, forKey: .dP050001E)
        try container.encode(dP050002E, forKey: .dP050002E)
        try container.encode(dP050002PE, forKey: .dP050002PE)
        try container.encode(dP050003E, forKey: .dP050003E)
        try container.encode(dP050003PE, forKey: .dP050003PE)
        try container.encode(dP050004E, forKey: .dP050004E)
    }
}


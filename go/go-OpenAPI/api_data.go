/*
 * Geo Spatial Query Api - US Census Boundaries and Census Data
 *
 * Easily integrate geospatial point-in-polygon search, census boundaries, location-based data, geofencing, and other location-based features into web and mobile apps. Our Software Development Kit (SDK) is available on GitHub at https://github.com/geospatialqueryapi/geospatialqueryapi-sdk. If possible then we are strongly recommending using our tested libraries available on GitHub, rather than creating new ones.      Copyright Â© 2021 Mobile Data Books, LLC. All Rights Reserved.  
 *
 * API version: 1.0.0
 * Contact: mobiledatabooks@mobiledatabooks.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DataApiService DataApi service
type DataApiService service

type ApiGetV1BoundariesUscountyIdGEOIDRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	gEOID string
}


func (r ApiGetV1BoundariesUscountyIdGEOIDRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUscountyIdGEOIDExecute(r)
}

/*
 * GetV1BoundariesUscountyIdGEOID v1-boundaries-uscounty-id-GEOID
 * U.S. County by GEOID.

Example:
GEOID=06001
Alameda, Alameda County, CA, California

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gEOID local identifier of a feature
 * @return ApiGetV1BoundariesUscountyIdGEOIDRequest
 */
func (a *DataApiService) GetV1BoundariesUscountyIdGEOID(ctx _context.Context, gEOID string) ApiGetV1BoundariesUscountyIdGEOIDRequest {
	return ApiGetV1BoundariesUscountyIdGEOIDRequest{
		ApiService: a,
		ctx: ctx,
		gEOID: gEOID,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUscountyIdGEOIDExecute(r ApiGetV1BoundariesUscountyIdGEOIDRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUscountyIdGEOID")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/uscounty/id/{GEOID}"
	localVarPath = strings.Replace(localVarPath, "{"+"GEOID"+"}", _neturl.PathEscape(parameterToString(r.gEOID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUscountyLatLonRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	latLon string
}


func (r ApiGetV1BoundariesUscountyLatLonRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUscountyLatLonExecute(r)
}

/*
 * GetV1BoundariesUscountyLatLon v1-boundaries-uscounty-LatLon
 * U.S. County by lat/lon.

Example:
LatLon=33.6756872|-117.7772068
 

Note: valid delimiters: | or ,

County by lat/lon: Alameda, Orange County, CA, California




Note: valid delimiters: | or ,

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param latLon local identifier of a feature
 * @return ApiGetV1BoundariesUscountyLatLonRequest
 */
func (a *DataApiService) GetV1BoundariesUscountyLatLon(ctx _context.Context, latLon string) ApiGetV1BoundariesUscountyLatLonRequest {
	return ApiGetV1BoundariesUscountyLatLonRequest{
		ApiService: a,
		ctx: ctx,
		latLon: latLon,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUscountyLatLonExecute(r ApiGetV1BoundariesUscountyLatLonRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUscountyLatLon")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/uscounty/latlon/{LatLon}"
	localVarPath = strings.Replace(localVarPath, "{"+"LatLon"+"}", _neturl.PathEscape(parameterToString(r.latLon, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUscousubIdGEOIDRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	gEOID string
}


func (r ApiGetV1BoundariesUscousubIdGEOIDRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUscousubIdGEOIDExecute(r)
}

/*
 * GetV1BoundariesUscousubIdGEOID v1-boundaries-uscousub-id-GEOID
 * U.S. County Subdivision by GEOID.

Example:
GEOID=0605991977
CA, Orange, Orange County, Mission Viejo CCD

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gEOID local identifier of a feature
 * @return ApiGetV1BoundariesUscousubIdGEOIDRequest
 */
func (a *DataApiService) GetV1BoundariesUscousubIdGEOID(ctx _context.Context, gEOID string) ApiGetV1BoundariesUscousubIdGEOIDRequest {
	return ApiGetV1BoundariesUscousubIdGEOIDRequest{
		ApiService: a,
		ctx: ctx,
		gEOID: gEOID,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUscousubIdGEOIDExecute(r ApiGetV1BoundariesUscousubIdGEOIDRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUscousubIdGEOID")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/uscousub/id/{GEOID}"
	localVarPath = strings.Replace(localVarPath, "{"+"GEOID"+"}", _neturl.PathEscape(parameterToString(r.gEOID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUscousubLatLonRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	latLon string
}


func (r ApiGetV1BoundariesUscousubLatLonRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUscousubLatLonExecute(r)
}

/*
 * GetV1BoundariesUscousubLatLon v1-boundaries-uscousub-LatLon
 * U.S. County Subdivision by lat/lon

Example:
LatLon=33.5627268|-117.5922593
 

Note: valid delimiters: | or ,

County by lat/lon: Alameda, Orange County, CA, California

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param latLon local identifier of a feature
 * @return ApiGetV1BoundariesUscousubLatLonRequest
 */
func (a *DataApiService) GetV1BoundariesUscousubLatLon(ctx _context.Context, latLon string) ApiGetV1BoundariesUscousubLatLonRequest {
	return ApiGetV1BoundariesUscousubLatLonRequest{
		ApiService: a,
		ctx: ctx,
		latLon: latLon,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUscousubLatLonExecute(r ApiGetV1BoundariesUscousubLatLonRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUscousubLatLon")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/uscousub/latlon/{LatLon}"
	localVarPath = strings.Replace(localVarPath, "{"+"LatLon"+"}", _neturl.PathEscape(parameterToString(r.latLon, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUsplaceIdGEOIDRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	gEOID string
}


func (r ApiGetV1BoundariesUsplaceIdGEOIDRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUsplaceIdGEOIDExecute(r)
}

/*
 * GetV1BoundariesUsplaceIdGEOID v1-boundaries-usplace-id-GEOID
 * U.S. Place by GEOID

Example:
GEOID=0686804
CA, California, Yolo County, Knights Landing CCD

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gEOID local identifier of a feature
 * @return ApiGetV1BoundariesUsplaceIdGEOIDRequest
 */
func (a *DataApiService) GetV1BoundariesUsplaceIdGEOID(ctx _context.Context, gEOID string) ApiGetV1BoundariesUsplaceIdGEOIDRequest {
	return ApiGetV1BoundariesUsplaceIdGEOIDRequest{
		ApiService: a,
		ctx: ctx,
		gEOID: gEOID,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUsplaceIdGEOIDExecute(r ApiGetV1BoundariesUsplaceIdGEOIDRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUsplaceIdGEOID")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/usplace/id/{GEOID}"
	localVarPath = strings.Replace(localVarPath, "{"+"GEOID"+"}", _neturl.PathEscape(parameterToString(r.gEOID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUsplaceLatLonRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	latLon string
}


func (r ApiGetV1BoundariesUsplaceLatLonRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUsplaceLatLonExecute(r)
}

/*
 * GetV1BoundariesUsplaceLatLon v1-boundaries-usplace-LatLon
 * U.S. Place by lat/lon

Example:
LatLon=33.8890375|-117.7720695
 
Note: valid delimiters: | or ,

CA, California, Orange County, Anaheim-Santa Ana-Garden Grove, Yorba Linda city

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param latLon local identifier of a feature
 * @return ApiGetV1BoundariesUsplaceLatLonRequest
 */
func (a *DataApiService) GetV1BoundariesUsplaceLatLon(ctx _context.Context, latLon string) ApiGetV1BoundariesUsplaceLatLonRequest {
	return ApiGetV1BoundariesUsplaceLatLonRequest{
		ApiService: a,
		ctx: ctx,
		latLon: latLon,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUsplaceLatLonExecute(r ApiGetV1BoundariesUsplaceLatLonRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUsplaceLatLon")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/usplace/latlon/{LatLon}"
	localVarPath = strings.Replace(localVarPath, "{"+"LatLon"+"}", _neturl.PathEscape(parameterToString(r.latLon, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUsstateIdGEOIDRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	gEOID string
}


func (r ApiGetV1BoundariesUsstateIdGEOIDRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUsstateIdGEOIDExecute(r)
}

/*
 * GetV1BoundariesUsstateIdGEOID v1-boundaries-usstate-id-GEOID
 * U.S. State by GEOID

Example:
GEOID=06
CA, California

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gEOID local identifier of a feature
 * @return ApiGetV1BoundariesUsstateIdGEOIDRequest
 */
func (a *DataApiService) GetV1BoundariesUsstateIdGEOID(ctx _context.Context, gEOID string) ApiGetV1BoundariesUsstateIdGEOIDRequest {
	return ApiGetV1BoundariesUsstateIdGEOIDRequest{
		ApiService: a,
		ctx: ctx,
		gEOID: gEOID,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUsstateIdGEOIDExecute(r ApiGetV1BoundariesUsstateIdGEOIDRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUsstateIdGEOID")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/usstate/id/{GEOID}"
	localVarPath = strings.Replace(localVarPath, "{"+"GEOID"+"}", _neturl.PathEscape(parameterToString(r.gEOID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUsstateLatLonRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	latLon string
}


func (r ApiGetV1BoundariesUsstateLatLonRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUsstateLatLonExecute(r)
}

/*
 * GetV1BoundariesUsstateLatLon v1-boundaries-usstate-LatLon
 * U.S. State by lat/lon.

Example:
LatLon=37.1551773|-119.5434183

Note: valid delimiters: | or ,

CA, California.

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param latLon local identifier of a feature
 * @return ApiGetV1BoundariesUsstateLatLonRequest
 */
func (a *DataApiService) GetV1BoundariesUsstateLatLon(ctx _context.Context, latLon string) ApiGetV1BoundariesUsstateLatLonRequest {
	return ApiGetV1BoundariesUsstateLatLonRequest{
		ApiService: a,
		ctx: ctx,
		latLon: latLon,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUsstateLatLonExecute(r ApiGetV1BoundariesUsstateLatLonRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUsstateLatLon")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/usstate/latlon/{LatLon}"
	localVarPath = strings.Replace(localVarPath, "{"+"LatLon"+"}", _neturl.PathEscape(parameterToString(r.latLon, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUstractIdGEOIDRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	gEOID string
}


func (r ApiGetV1BoundariesUstractIdGEOIDRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUstractIdGEOIDExecute(r)
}

/*
 * GetV1BoundariesUstractIdGEOID v1-boundaries-ustract-id-GEOID
 * U.S. Census Tract by GEOID

Example:
GEOID=06059062619
CA, California, Orange County, Census Tract 626.19

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gEOID local identifier of a feature
 * @return ApiGetV1BoundariesUstractIdGEOIDRequest
 */
func (a *DataApiService) GetV1BoundariesUstractIdGEOID(ctx _context.Context, gEOID string) ApiGetV1BoundariesUstractIdGEOIDRequest {
	return ApiGetV1BoundariesUstractIdGEOIDRequest{
		ApiService: a,
		ctx: ctx,
		gEOID: gEOID,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUstractIdGEOIDExecute(r ApiGetV1BoundariesUstractIdGEOIDRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUstractIdGEOID")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/ustract/id/{GEOID}"
	localVarPath = strings.Replace(localVarPath, "{"+"GEOID"+"}", _neturl.PathEscape(parameterToString(r.gEOID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUstractLatLonRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	latLon string
}


func (r ApiGetV1BoundariesUstractLatLonRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUstractLatLonExecute(r)
}

/*
 * GetV1BoundariesUstractLatLon v1-boundaries-ustract-LatLon
 * U.S. Census Tract by lat/lon

Example:
LatLon=33.5354639|-117.7720695
 
Note: valid delimiters: | or ,

CA, California, Orange County, Anaheim-Santa Ana-Garden Grove, Yorba Linda city

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param latLon local identifier of a feature
 * @return ApiGetV1BoundariesUstractLatLonRequest
 */
func (a *DataApiService) GetV1BoundariesUstractLatLon(ctx _context.Context, latLon string) ApiGetV1BoundariesUstractLatLonRequest {
	return ApiGetV1BoundariesUstractLatLonRequest{
		ApiService: a,
		ctx: ctx,
		latLon: latLon,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUstractLatLonExecute(r ApiGetV1BoundariesUstractLatLonRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUstractLatLon")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/ustract/latlon/{LatLon}"
	localVarPath = strings.Replace(localVarPath, "{"+"LatLon"+"}", _neturl.PathEscape(parameterToString(r.latLon, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUszctaIdGEOIDRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	gEOID string
}


func (r ApiGetV1BoundariesUszctaIdGEOIDRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUszctaIdGEOIDExecute(r)
}

/*
 * GetV1BoundariesUszctaIdGEOID v1-boundaries-uszcta-id-GEOID
 * U.S. ZCTA5 by GEOID

Example:
GEOID=92688
CA, California, Orange County, 92688

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gEOID local identifier of a feature
 * @return ApiGetV1BoundariesUszctaIdGEOIDRequest
 */
func (a *DataApiService) GetV1BoundariesUszctaIdGEOID(ctx _context.Context, gEOID string) ApiGetV1BoundariesUszctaIdGEOIDRequest {
	return ApiGetV1BoundariesUszctaIdGEOIDRequest{
		ApiService: a,
		ctx: ctx,
		gEOID: gEOID,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUszctaIdGEOIDExecute(r ApiGetV1BoundariesUszctaIdGEOIDRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUszctaIdGEOID")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/uszcta/id/{GEOID}"
	localVarPath = strings.Replace(localVarPath, "{"+"GEOID"+"}", _neturl.PathEscape(parameterToString(r.gEOID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetV1BoundariesUszctaLatLonRequest struct {
	ctx _context.Context
	ApiService *DataApiService
	latLon string
}


func (r ApiGetV1BoundariesUszctaLatLonRequest) Execute() (FeatureGeoJSON, *_nethttp.Response, error) {
	return r.ApiService.GetV1BoundariesUszctaLatLonExecute(r)
}

/*
 * GetV1BoundariesUszctaLatLon v1-boundaries-uszcta-LatLon
 * U.S. ZCTA5 by lat/lon

Example:
LatLon=33.6196715|-117.6120873

Note: valid delimiters: | or ,

CA, California, Orange County, 92688

Please look at: 

/properties/info/TimeToRun

to get the actial time to run.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param latLon local identifier of a feature
 * @return ApiGetV1BoundariesUszctaLatLonRequest
 */
func (a *DataApiService) GetV1BoundariesUszctaLatLon(ctx _context.Context, latLon string) ApiGetV1BoundariesUszctaLatLonRequest {
	return ApiGetV1BoundariesUszctaLatLonRequest{
		ApiService: a,
		ctx: ctx,
		latLon: latLon,
	}
}

/*
 * Execute executes the request
 * @return FeatureGeoJSON
 */
func (a *DataApiService) GetV1BoundariesUszctaLatLonExecute(r ApiGetV1BoundariesUszctaLatLonRequest) (FeatureGeoJSON, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeatureGeoJSON
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataApiService.GetV1BoundariesUszctaLatLon")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/boundaries/uszcta/latlon/{LatLon}"
	localVarPath = strings.Replace(localVarPath, "{"+"LatLon"+"}", _neturl.PathEscape(parameterToString(r.latLon, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

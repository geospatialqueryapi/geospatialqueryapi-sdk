/*
 * Geo Spatial Query Api - US Census Boundaries and Census Data
 *
 * Easily integrate geospatial point-in-polygon search, census boundaries, location-based data, geofencing, and other location-based features into web and mobile apps. Our Software Development Kit (SDK) is available on GitHub at https://github.com/geospatialqueryapi/geospatialqueryapi-sdk. If possible then we are strongly recommending using our tested libraries available on GitHub, rather than creating new ones. PDF documentation - ./pdf.html
 *
 * API version: 1.0.0
 * Contact: mobiledatabooks@mobiledatabooks.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MultipolygonGeoJSON struct for MultipolygonGeoJSON
type MultipolygonGeoJSON struct {
	Type string `json:"type"`
	Coordinates [][][][]float32 `json:"coordinates"`
	AdditionalProperties map[string]interface{}
}

type _MultipolygonGeoJSON MultipolygonGeoJSON

// NewMultipolygonGeoJSON instantiates a new MultipolygonGeoJSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipolygonGeoJSON(type_ string, coordinates [][][][]float32) *MultipolygonGeoJSON {
	this := MultipolygonGeoJSON{}
	this.Type = type_
	this.Coordinates = coordinates
	return &this
}

// NewMultipolygonGeoJSONWithDefaults instantiates a new MultipolygonGeoJSON object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipolygonGeoJSONWithDefaults() *MultipolygonGeoJSON {
	this := MultipolygonGeoJSON{}
	return &this
}

// GetType returns the Type field value
func (o *MultipolygonGeoJSON) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MultipolygonGeoJSON) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MultipolygonGeoJSON) SetType(v string) {
	o.Type = v
}

// GetCoordinates returns the Coordinates field value
func (o *MultipolygonGeoJSON) GetCoordinates() [][][][]float32 {
	if o == nil {
		var ret [][][][]float32
		return ret
	}

	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value
// and a boolean to check if the value has been set.
func (o *MultipolygonGeoJSON) GetCoordinatesOk() (*[][][][]float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Coordinates, true
}

// SetCoordinates sets field value
func (o *MultipolygonGeoJSON) SetCoordinates(v [][][][]float32) {
	o.Coordinates = v
}

func (o MultipolygonGeoJSON) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["coordinates"] = o.Coordinates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MultipolygonGeoJSON) UnmarshalJSON(bytes []byte) (err error) {
	varMultipolygonGeoJSON := _MultipolygonGeoJSON{}

	if err = json.Unmarshal(bytes, &varMultipolygonGeoJSON); err == nil {
		*o = MultipolygonGeoJSON(varMultipolygonGeoJSON)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "coordinates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultipolygonGeoJSON struct {
	value *MultipolygonGeoJSON
	isSet bool
}

func (v NullableMultipolygonGeoJSON) Get() *MultipolygonGeoJSON {
	return v.value
}

func (v *NullableMultipolygonGeoJSON) Set(val *MultipolygonGeoJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipolygonGeoJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipolygonGeoJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipolygonGeoJSON(val *MultipolygonGeoJSON) *NullableMultipolygonGeoJSON {
	return &NullableMultipolygonGeoJSON{value: val, isSet: true}
}

func (v NullableMultipolygonGeoJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipolygonGeoJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



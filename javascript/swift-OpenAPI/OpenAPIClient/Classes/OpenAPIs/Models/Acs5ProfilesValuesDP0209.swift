//
// Acs5ProfilesValuesDP0209.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** RESIDENCE 1 YEAR AGO */
public struct Acs5ProfilesValuesDP0209: Codable, Hashable {

    /** RESIDENCE 1 YEAR AGO */
    public var mDBGroupName: String
    /** DP0209 */
    public var mDBGroupCode: String
    public var dP020079E: Acs5ProfilesValuesDP0209DP020079E
    public var dP020080E: Acs5ProfilesValuesDP0209DP020080E
    public var dP020080PE: Acs5ProfilesValuesDP0209DP020080PE
    public var dP020081E: Acs5ProfilesValuesDP0209DP020081E
    public var dP020081PE: Acs5ProfilesValuesDP0209DP020081PE
    public var dP020082E: Acs5ProfilesValuesDP0209DP020082E
    public var dP020082PE: Acs5ProfilesValuesDP0209DP020082PE
    public var dP020083E: Acs5ProfilesValuesDP0209DP020083E
    public var dP020083PE: Acs5ProfilesValuesDP0209DP020083PE
    public var dP020084E: Acs5ProfilesValuesDP0209DP020084E
    public var dP020084PE: Acs5ProfilesValuesDP0209DP020084PE
    public var dP020085E: Acs5ProfilesValuesDP0209DP020085E
    public var dP020085PE: Acs5ProfilesValuesDP0209DP020085PE
    public var dP020086E: Acs5ProfilesValuesDP0209DP020086E
    public var dP020086PE: Acs5ProfilesValuesDP0209DP020086PE

    public init(mDBGroupName: String, mDBGroupCode: String, dP020079E: Acs5ProfilesValuesDP0209DP020079E, dP020080E: Acs5ProfilesValuesDP0209DP020080E, dP020080PE: Acs5ProfilesValuesDP0209DP020080PE, dP020081E: Acs5ProfilesValuesDP0209DP020081E, dP020081PE: Acs5ProfilesValuesDP0209DP020081PE, dP020082E: Acs5ProfilesValuesDP0209DP020082E, dP020082PE: Acs5ProfilesValuesDP0209DP020082PE, dP020083E: Acs5ProfilesValuesDP0209DP020083E, dP020083PE: Acs5ProfilesValuesDP0209DP020083PE, dP020084E: Acs5ProfilesValuesDP0209DP020084E, dP020084PE: Acs5ProfilesValuesDP0209DP020084PE, dP020085E: Acs5ProfilesValuesDP0209DP020085E, dP020085PE: Acs5ProfilesValuesDP0209DP020085PE, dP020086E: Acs5ProfilesValuesDP0209DP020086E, dP020086PE: Acs5ProfilesValuesDP0209DP020086PE) {
        self.mDBGroupName = mDBGroupName
        self.mDBGroupCode = mDBGroupCode
        self.dP020079E = dP020079E
        self.dP020080E = dP020080E
        self.dP020080PE = dP020080PE
        self.dP020081E = dP020081E
        self.dP020081PE = dP020081PE
        self.dP020082E = dP020082E
        self.dP020082PE = dP020082PE
        self.dP020083E = dP020083E
        self.dP020083PE = dP020083PE
        self.dP020084E = dP020084E
        self.dP020084PE = dP020084PE
        self.dP020085E = dP020085E
        self.dP020085PE = dP020085PE
        self.dP020086E = dP020086E
        self.dP020086PE = dP020086PE
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mDBGroupName = "MDBGroupName"
        case mDBGroupCode = "MDBGroupCode"
        case dP020079E = "DP020079E"
        case dP020080E = "DP020080E"
        case dP020080PE = "DP020080PE"
        case dP020081E = "DP020081E"
        case dP020081PE = "DP020081PE"
        case dP020082E = "DP020082E"
        case dP020082PE = "DP020082PE"
        case dP020083E = "DP020083E"
        case dP020083PE = "DP020083PE"
        case dP020084E = "DP020084E"
        case dP020084PE = "DP020084PE"
        case dP020085E = "DP020085E"
        case dP020085PE = "DP020085PE"
        case dP020086E = "DP020086E"
        case dP020086PE = "DP020086PE"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mDBGroupName, forKey: .mDBGroupName)
        try container.encode(mDBGroupCode, forKey: .mDBGroupCode)
        try container.encode(dP020079E, forKey: .dP020079E)
        try container.encode(dP020080E, forKey: .dP020080E)
        try container.encode(dP020080PE, forKey: .dP020080PE)
        try container.encode(dP020081E, forKey: .dP020081E)
        try container.encode(dP020081PE, forKey: .dP020081PE)
        try container.encode(dP020082E, forKey: .dP020082E)
        try container.encode(dP020082PE, forKey: .dP020082PE)
        try container.encode(dP020083E, forKey: .dP020083E)
        try container.encode(dP020083PE, forKey: .dP020083PE)
        try container.encode(dP020084E, forKey: .dP020084E)
        try container.encode(dP020084PE, forKey: .dP020084PE)
        try container.encode(dP020085E, forKey: .dP020085E)
        try container.encode(dP020085PE, forKey: .dP020085PE)
        try container.encode(dP020086E, forKey: .dP020086E)
        try container.encode(dP020086PE, forKey: .dP020086PE)
    }
}


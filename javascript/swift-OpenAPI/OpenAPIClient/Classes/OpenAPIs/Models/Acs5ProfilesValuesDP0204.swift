//
// Acs5ProfilesValuesDP0204.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** FERTILITY */
public struct Acs5ProfilesValuesDP0204: Codable, Hashable {

    /** FERTILITY */
    public var mDBGroupName: String
    /** DP0204 */
    public var mDBGroupCode: String
    public var dP020037E: Acs5ProfilesValuesDP0204DP020037E
    public var dP020037PE: Acs5ProfilesValuesDP0204DP020037PE
    public var dP020038E: Acs5ProfilesValuesDP0204DP020038E
    public var dP020038PE: Acs5ProfilesValuesDP0204DP020038PE
    public var dP020040E: Acs5ProfilesValuesDP0204DP020040E

    public init(mDBGroupName: String, mDBGroupCode: String, dP020037E: Acs5ProfilesValuesDP0204DP020037E, dP020037PE: Acs5ProfilesValuesDP0204DP020037PE, dP020038E: Acs5ProfilesValuesDP0204DP020038E, dP020038PE: Acs5ProfilesValuesDP0204DP020038PE, dP020040E: Acs5ProfilesValuesDP0204DP020040E) {
        self.mDBGroupName = mDBGroupName
        self.mDBGroupCode = mDBGroupCode
        self.dP020037E = dP020037E
        self.dP020037PE = dP020037PE
        self.dP020038E = dP020038E
        self.dP020038PE = dP020038PE
        self.dP020040E = dP020040E
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mDBGroupName = "MDBGroupName"
        case mDBGroupCode = "MDBGroupCode"
        case dP020037E = "DP020037E"
        case dP020037PE = "DP020037PE"
        case dP020038E = "DP020038E"
        case dP020038PE = "DP020038PE"
        case dP020040E = "DP020040E"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mDBGroupName, forKey: .mDBGroupName)
        try container.encode(mDBGroupCode, forKey: .mDBGroupCode)
        try container.encode(dP020037E, forKey: .dP020037E)
        try container.encode(dP020037PE, forKey: .dP020037PE)
        try container.encode(dP020038E, forKey: .dP020038E)
        try container.encode(dP020038PE, forKey: .dP020038PE)
        try container.encode(dP020040E, forKey: .dP020040E)
    }
}


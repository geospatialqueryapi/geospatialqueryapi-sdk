//
// Acs5ProfilesValuesDP0411.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Acs5ProfilesValuesDP0411: Codable, Hashable {

    public var mDBGroupName: String
    public var mDBGroupCode: String
    public var dP040101E: Acs5ProfilesValuesDP0411DP040101E
    public var dP040102E: Acs5ProfilesValuesDP0411DP040102E
    public var dP040102PE: Acs5ProfilesValuesDP0411DP040102PE

    public init(mDBGroupName: String, mDBGroupCode: String, dP040101E: Acs5ProfilesValuesDP0411DP040101E, dP040102E: Acs5ProfilesValuesDP0411DP040102E, dP040102PE: Acs5ProfilesValuesDP0411DP040102PE) {
        self.mDBGroupName = mDBGroupName
        self.mDBGroupCode = mDBGroupCode
        self.dP040101E = dP040101E
        self.dP040102E = dP040102E
        self.dP040102PE = dP040102PE
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mDBGroupName = "MDBGroupName"
        case mDBGroupCode = "MDBGroupCode"
        case dP040101E = "DP040101E"
        case dP040102E = "DP040102E"
        case dP040102PE = "DP040102PE"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mDBGroupName, forKey: .mDBGroupName)
        try container.encode(mDBGroupCode, forKey: .mDBGroupCode)
        try container.encode(dP040101E, forKey: .dP040101E)
        try container.encode(dP040102E, forKey: .dP040102E)
        try container.encode(dP040102PE, forKey: .dP040102PE)
    }
}


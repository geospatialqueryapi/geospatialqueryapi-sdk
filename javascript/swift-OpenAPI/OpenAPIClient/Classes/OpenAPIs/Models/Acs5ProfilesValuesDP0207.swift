//
// Acs5ProfilesValuesDP0207.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** EDUCATIONAL ATTAINMENT */
public struct Acs5ProfilesValuesDP0207: Codable, Hashable {

    /** EDUCATIONAL ATTAINMENT */
    public var mDBGroupName: String
    /** DP0207 */
    public var mDBGroupCode: String
    public var dP020059E: Acs5ProfilesValuesDP0207DP020059E
    public var dP020059PE: Acs5ProfilesValuesDP0207DP020059PE
    public var dP020062E: Acs5ProfilesValuesDP0207DP020062E
    public var dP020062PE: Acs5ProfilesValuesDP0207DP020062PE
    public var dP020064E: Acs5ProfilesValuesDP0207DP020064E
    public var dP020064PE: Acs5ProfilesValuesDP0207DP020064PE
    public var dP020065E: Acs5ProfilesValuesDP0207DP020065E
    public var dP020065PE: Acs5ProfilesValuesDP0207DP020065PE
    public var dP020066E: Acs5ProfilesValuesDP0207DP020066E
    public var dP020066PE: Acs5ProfilesValuesDP0207DP020066PE
    public var dP020067E: Acs5ProfilesValuesDP0207DP020067E
    public var dP020067PE: Acs5ProfilesValuesDP0207DP020067PE
    public var dP020068E: Acs5ProfilesValuesDP0207DP020068E
    public var dP020068PE: Acs5ProfilesValuesDP0207DP020068PE

    public init(mDBGroupName: String, mDBGroupCode: String, dP020059E: Acs5ProfilesValuesDP0207DP020059E, dP020059PE: Acs5ProfilesValuesDP0207DP020059PE, dP020062E: Acs5ProfilesValuesDP0207DP020062E, dP020062PE: Acs5ProfilesValuesDP0207DP020062PE, dP020064E: Acs5ProfilesValuesDP0207DP020064E, dP020064PE: Acs5ProfilesValuesDP0207DP020064PE, dP020065E: Acs5ProfilesValuesDP0207DP020065E, dP020065PE: Acs5ProfilesValuesDP0207DP020065PE, dP020066E: Acs5ProfilesValuesDP0207DP020066E, dP020066PE: Acs5ProfilesValuesDP0207DP020066PE, dP020067E: Acs5ProfilesValuesDP0207DP020067E, dP020067PE: Acs5ProfilesValuesDP0207DP020067PE, dP020068E: Acs5ProfilesValuesDP0207DP020068E, dP020068PE: Acs5ProfilesValuesDP0207DP020068PE) {
        self.mDBGroupName = mDBGroupName
        self.mDBGroupCode = mDBGroupCode
        self.dP020059E = dP020059E
        self.dP020059PE = dP020059PE
        self.dP020062E = dP020062E
        self.dP020062PE = dP020062PE
        self.dP020064E = dP020064E
        self.dP020064PE = dP020064PE
        self.dP020065E = dP020065E
        self.dP020065PE = dP020065PE
        self.dP020066E = dP020066E
        self.dP020066PE = dP020066PE
        self.dP020067E = dP020067E
        self.dP020067PE = dP020067PE
        self.dP020068E = dP020068E
        self.dP020068PE = dP020068PE
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mDBGroupName = "MDBGroupName"
        case mDBGroupCode = "MDBGroupCode"
        case dP020059E = "DP020059E"
        case dP020059PE = "DP020059PE"
        case dP020062E = "DP020062E"
        case dP020062PE = "DP020062PE"
        case dP020064E = "DP020064E"
        case dP020064PE = "DP020064PE"
        case dP020065E = "DP020065E"
        case dP020065PE = "DP020065PE"
        case dP020066E = "DP020066E"
        case dP020066PE = "DP020066PE"
        case dP020067E = "DP020067E"
        case dP020067PE = "DP020067PE"
        case dP020068E = "DP020068E"
        case dP020068PE = "DP020068PE"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mDBGroupName, forKey: .mDBGroupName)
        try container.encode(mDBGroupCode, forKey: .mDBGroupCode)
        try container.encode(dP020059E, forKey: .dP020059E)
        try container.encode(dP020059PE, forKey: .dP020059PE)
        try container.encode(dP020062E, forKey: .dP020062E)
        try container.encode(dP020062PE, forKey: .dP020062PE)
        try container.encode(dP020064E, forKey: .dP020064E)
        try container.encode(dP020064PE, forKey: .dP020064PE)
        try container.encode(dP020065E, forKey: .dP020065E)
        try container.encode(dP020065PE, forKey: .dP020065PE)
        try container.encode(dP020066E, forKey: .dP020066E)
        try container.encode(dP020066PE, forKey: .dP020066PE)
        try container.encode(dP020067E, forKey: .dP020067E)
        try container.encode(dP020067PE, forKey: .dP020067PE)
        try container.encode(dP020068E, forKey: .dP020068E)
        try container.encode(dP020068PE, forKey: .dP020068PE)
    }
}


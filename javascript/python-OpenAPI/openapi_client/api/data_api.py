"""
    Geo Spatial Query Api - US Census Boundaries and Census Data

    Easily integrate geospatial point-in-polygon search, census boundaries, location-based data, geofencing, and other location-based features into web and mobile apps. SDK Our Software Development Kit (SDK) is available on GitHub at https://github.com/geospatialqueryapi/geospatialqueryapi-sdk. If possible then we are strongly recommending using our tested libraries available on GitHub, rather than creating new ones.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: mobiledatabooks@mobiledatabooks.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.feature_geo_json import FeatureGeoJSON
from openapi_client.model.inline_response400 import InlineResponse400


class DataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_v1_boundaries_uscounty_id_geoid(
            self,
            geoid,
            **kwargs
        ):
            """v1-boundaries-uscounty-id-GEOID  # noqa: E501

            U.S. County by GEOID.  Example: GEOID=06001 Alameda, Alameda County, CA, California  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_uscounty_id_geoid(geoid, async_req=True)
            >>> result = thread.get()

            Args:
                geoid (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['geoid'] = \
                geoid
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_uscounty_id_geoid = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/uscounty/id/{GEOID}',
                'operation_id': 'get_v1_boundaries_uscounty_id_geoid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'geoid',
                ],
                'required': [
                    'geoid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'geoid':
                        (str,),
                },
                'attribute_map': {
                    'geoid': 'GEOID',
                },
                'location_map': {
                    'geoid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_uscounty_id_geoid
        )

        def __get_v1_boundaries_uscounty_lat_lon(
            self,
            lat_lon,
            **kwargs
        ):
            """v1-boundaries-uscounty-LatLon  # noqa: E501

            U.S. County by lat/lon.  Example: LatLon=33.6756872|-117.7772068 LatLon=33.6756872,-117.7772068  Note: valid delimiters: | or ,  County by lat/lon: Alameda, Orange County, CA, California     Note: valid delimiters: | or ,  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_uscounty_lat_lon(lat_lon, async_req=True)
            >>> result = thread.get()

            Args:
                lat_lon (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lat_lon'] = \
                lat_lon
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_uscounty_lat_lon = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/uscounty/latlon/{LatLon}',
                'operation_id': 'get_v1_boundaries_uscounty_lat_lon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lat_lon',
                ],
                'required': [
                    'lat_lon',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lat_lon':
                        (str,),
                },
                'attribute_map': {
                    'lat_lon': 'LatLon',
                },
                'location_map': {
                    'lat_lon': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_uscounty_lat_lon
        )

        def __get_v1_boundaries_uscousub_id_geoid(
            self,
            geoid,
            **kwargs
        ):
            """v1-boundaries-uscousub-id-GEOID  # noqa: E501

            U.S. County Subdivision by GEOID.  Example: GEOID=0605991977 CA, Orange, Orange County, Mission Viejo CCD  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_uscousub_id_geoid(geoid, async_req=True)
            >>> result = thread.get()

            Args:
                geoid (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['geoid'] = \
                geoid
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_uscousub_id_geoid = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/uscousub/id/{GEOID}',
                'operation_id': 'get_v1_boundaries_uscousub_id_geoid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'geoid',
                ],
                'required': [
                    'geoid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'geoid':
                        (str,),
                },
                'attribute_map': {
                    'geoid': 'GEOID',
                },
                'location_map': {
                    'geoid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_uscousub_id_geoid
        )

        def __get_v1_boundaries_uscousub_lat_lon(
            self,
            lat_lon,
            **kwargs
        ):
            """v1-boundaries-uscousub-LatLon  # noqa: E501

            U.S. County Subdivision by lat/lon  Example: LatLon=33.5627268|-117.5922593 LatLon=33.5627268,-117.5922593  Note: valid delimiters: | or ,  County by lat/lon: Alameda, Orange County, CA, California  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_uscousub_lat_lon(lat_lon, async_req=True)
            >>> result = thread.get()

            Args:
                lat_lon (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lat_lon'] = \
                lat_lon
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_uscousub_lat_lon = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/uscousub/latlon/{LatLon}',
                'operation_id': 'get_v1_boundaries_uscousub_lat_lon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lat_lon',
                ],
                'required': [
                    'lat_lon',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lat_lon':
                        (str,),
                },
                'attribute_map': {
                    'lat_lon': 'LatLon',
                },
                'location_map': {
                    'lat_lon': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_uscousub_lat_lon
        )

        def __get_v1_boundaries_usplace_id_geoid(
            self,
            geoid,
            **kwargs
        ):
            """v1-boundaries-usplace-id-GEOID  # noqa: E501

            U.S. Place by GEOID  Example: GEOID=0686804 CA, California, Yolo County, Knights Landing CCD  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_usplace_id_geoid(geoid, async_req=True)
            >>> result = thread.get()

            Args:
                geoid (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['geoid'] = \
                geoid
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_usplace_id_geoid = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/usplace/id/{GEOID}',
                'operation_id': 'get_v1_boundaries_usplace_id_geoid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'geoid',
                ],
                'required': [
                    'geoid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'geoid':
                        (str,),
                },
                'attribute_map': {
                    'geoid': 'GEOID',
                },
                'location_map': {
                    'geoid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_usplace_id_geoid
        )

        def __get_v1_boundaries_usplace_lat_lon(
            self,
            lat_lon,
            **kwargs
        ):
            """v1-boundaries-usplace-LatLon  # noqa: E501

            U.S. Place by lat/lon  Example: LatLon=33.8890375|-117.7720695 LatLon=33.8890375,-117.7720695  Note: valid delimiters: | or ,  CA, California, Orange County, Anaheim-Santa Ana-Garden Grove, Yorba Linda city  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_usplace_lat_lon(lat_lon, async_req=True)
            >>> result = thread.get()

            Args:
                lat_lon (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lat_lon'] = \
                lat_lon
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_usplace_lat_lon = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/usplace/latlon/{LatLon}',
                'operation_id': 'get_v1_boundaries_usplace_lat_lon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lat_lon',
                ],
                'required': [
                    'lat_lon',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lat_lon':
                        (str,),
                },
                'attribute_map': {
                    'lat_lon': 'LatLon',
                },
                'location_map': {
                    'lat_lon': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_usplace_lat_lon
        )

        def __get_v1_boundaries_usstate_id_geoid(
            self,
            geoid,
            **kwargs
        ):
            """v1-boundaries-usstate-id-GEOID  # noqa: E501

            U.S. State by GEOID  Example: GEOID=06 CA, California  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_usstate_id_geoid(geoid, async_req=True)
            >>> result = thread.get()

            Args:
                geoid (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['geoid'] = \
                geoid
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_usstate_id_geoid = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/usstate/id/{GEOID}',
                'operation_id': 'get_v1_boundaries_usstate_id_geoid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'geoid',
                ],
                'required': [
                    'geoid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'geoid':
                        (str,),
                },
                'attribute_map': {
                    'geoid': 'GEOID',
                },
                'location_map': {
                    'geoid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_usstate_id_geoid
        )

        def __get_v1_boundaries_usstate_lat_lon(
            self,
            lat_lon,
            **kwargs
        ):
            """v1-boundaries-usstate-LatLon  # noqa: E501

            U.S. State by lat/lon.  Example: LatLon=37.1551773|-119.5434183 LatLon=37.1551773,-119.5434183  Note: valid delimiters: | or ,  CA, California.  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_usstate_lat_lon(lat_lon, async_req=True)
            >>> result = thread.get()

            Args:
                lat_lon (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lat_lon'] = \
                lat_lon
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_usstate_lat_lon = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/usstate/latlon/{LatLon}',
                'operation_id': 'get_v1_boundaries_usstate_lat_lon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lat_lon',
                ],
                'required': [
                    'lat_lon',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lat_lon':
                        (str,),
                },
                'attribute_map': {
                    'lat_lon': 'LatLon',
                },
                'location_map': {
                    'lat_lon': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_usstate_lat_lon
        )

        def __get_v1_boundaries_ustract_id_geoid(
            self,
            geoid,
            **kwargs
        ):
            """v1-boundaries-ustract-id-GEOID  # noqa: E501

            U.S. Census Tract by GEOID  Example: GEOID=06059990100 CA, California, Orange County, Census Tract 1105  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_ustract_id_geoid(geoid, async_req=True)
            >>> result = thread.get()

            Args:
                geoid (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['geoid'] = \
                geoid
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_ustract_id_geoid = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/ustract/id/{GEOID}',
                'operation_id': 'get_v1_boundaries_ustract_id_geoid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'geoid',
                ],
                'required': [
                    'geoid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'geoid':
                        (str,),
                },
                'attribute_map': {
                    'geoid': 'GEOID',
                },
                'location_map': {
                    'geoid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_ustract_id_geoid
        )

        def __get_v1_boundaries_ustract_lat_lon(
            self,
            lat_lon,
            **kwargs
        ):
            """v1-boundaries-ustract-LatLon  # noqa: E501

            U.S. Census Tract by lat/lon  Example: LatLon=33.5354639|-117.7720695 LatLon=33.5354639,-117.7720695  Note: valid delimiters: | or ,  CA, California, Orange County, Census Tract 9901  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_ustract_lat_lon(lat_lon, async_req=True)
            >>> result = thread.get()

            Args:
                lat_lon (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lat_lon'] = \
                lat_lon
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_ustract_lat_lon = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/ustract/latlon/{LatLon}',
                'operation_id': 'get_v1_boundaries_ustract_lat_lon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lat_lon',
                ],
                'required': [
                    'lat_lon',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lat_lon':
                        (str,),
                },
                'attribute_map': {
                    'lat_lon': 'LatLon',
                },
                'location_map': {
                    'lat_lon': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_ustract_lat_lon
        )

        def __get_v1_boundaries_uszcta_id_geoid(
            self,
            geoid,
            **kwargs
        ):
            """v1-boundaries-uszcta-id-GEOID  # noqa: E501

            U.S. ZCTA5 by GEOID  Example: GEOID=92688 CA, California, Orange County, 92688  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_uszcta_id_geoid(geoid, async_req=True)
            >>> result = thread.get()

            Args:
                geoid (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['geoid'] = \
                geoid
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_uszcta_id_geoid = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/uszcta/id/{GEOID}',
                'operation_id': 'get_v1_boundaries_uszcta_id_geoid',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'geoid',
                ],
                'required': [
                    'geoid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'geoid':
                        (str,),
                },
                'attribute_map': {
                    'geoid': 'GEOID',
                },
                'location_map': {
                    'geoid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_uszcta_id_geoid
        )

        def __get_v1_boundaries_uszcta_lat_lon(
            self,
            lat_lon,
            **kwargs
        ):
            """v1-boundaries-uszcta-LatLon  # noqa: E501

            U.S. ZCTA5 by lat/lon  Example: LatLon=33.6196715|-117.6120873 LatLon=33.6196715,-117.6120873  Note: valid delimiters: | or ,  CA, California, Orange County, 92688  Please look at:   /properties/info/TimeToRun  to get the actial time to run.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_v1_boundaries_uszcta_lat_lon(lat_lon, async_req=True)
            >>> result = thread.get()

            Args:
                lat_lon (str): local identifier of a feature

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeatureGeoJSON
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['lat_lon'] = \
                lat_lon
            return self.call_with_http_info(**kwargs)

        self.get_v1_boundaries_uszcta_lat_lon = _Endpoint(
            settings={
                'response_type': (FeatureGeoJSON,),
                'auth': [],
                'endpoint_path': '/v1/boundaries/uszcta/latlon/{LatLon}',
                'operation_id': 'get_v1_boundaries_uszcta_lat_lon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lat_lon',
                ],
                'required': [
                    'lat_lon',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lat_lon':
                        (str,),
                },
                'attribute_map': {
                    'lat_lon': 'LatLon',
                },
                'location_map': {
                    'lat_lon': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_v1_boundaries_uszcta_lat_lon
        )
